# coding: utf-8

"""
Agent Protocol

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.6
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from ap_client.models.goto import Goto
from ap_client.models.resume import Resume
from ap_client.models.update import Update
from typing import Set
from typing_extensions import Self


class RunUpdateCommand(BaseModel):
    """
    RunUpdateCommand
    """  # noqa: E501

    update: Optional[Update] = None
    resume: Optional[Resume] = None
    goto: Optional[Goto] = None
    __properties: ClassVar[List[str]] = ["update", "resume", "goto"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunUpdateCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of update
        if self.update:
            _dict["update"] = self.update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resume
        if self.resume:
            _dict["resume"] = self.resume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of goto
        if self.goto:
            _dict["goto"] = self.goto.to_dict()
        # set to None if update (nullable) is None
        # and model_fields_set contains the field
        if self.update is None and "update" in self.model_fields_set:
            _dict["update"] = None

        # set to None if resume (nullable) is None
        # and model_fields_set contains the field
        if self.resume is None and "resume" in self.model_fields_set:
            _dict["resume"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunUpdateCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "update": Update.from_dict(obj["update"])
                if obj.get("update") is not None
                else None,
                "resume": Resume.from_dict(obj["resume"])
                if obj.get("resume") is not None
                else None,
                "goto": Goto.from_dict(obj["goto"])
                if obj.get("goto") is not None
                else None,
            }
        )
        return _obj
